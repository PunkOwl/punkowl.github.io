{"version":3,"sources":["component/template.js","routes.js","component/home.js","component/projects.js","component/about.js","App.js","serviceWorker.js","index.js"],"names":["Template","props","children","className","href","title","path","exact","component","App","render","rest","routes","map","route","key","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mPAGe,SAASA,EAASC,GAC7B,OACI,8BACKA,EAAMC,SACP,gCACI,yBAAKC,UAAU,oBACX,yBAAKA,UAAU,yBAEX,6BAFJ,WAGY,2BAAG,uBAAGC,KAAK,+BAAR,uBACX,iCCTT,OACX,CACIC,MAAO,OACPC,KAAM,IACNC,OAAO,EACPC,UCPO,WACX,OACI,yBAAKL,UAAU,kBACX,yBAAKA,UAAU,UACX,yBAAKA,UAAU,WAAf,WACA,yBAAKA,UAAU,oBAAf,uCACA,wBAAIA,UAAU,aACV,4BACI,+CAEJ,4BACI,4CAEJ,4BACI,yDDLpB,CACIE,MAAO,WACPC,KAAM,YACNC,OAAO,EACPC,UEbO,WACX,OACI,gCFaJ,CACIH,MAAO,QACPC,KAAM,SACNC,OAAO,EACPC,UGnBO,WACX,OACI,iCCqBOC,MApBf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,OAAQ,SAAAC,GAAI,OACV,kBAACX,EAAD,KACE,kBAAC,IAAD,KACGY,EAAOC,KAAI,SAAAC,GAAK,OACf,kBAAC,IAAD,eAAOC,IAAKD,EAAMC,KAASD,eCFzBE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASX,OAAO,kBAAC,EAAD,MAASY,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f11fbdfe.chunk.js","sourcesContent":["import React from 'react';\nimport '../asset/punk-style.css';\n\nexport default function Template(props) {\n    return (\n        <main>\n            {props.children}\n            <footer>\n                <div className=\"footer-container\">\n                    <div className=\"center footer-content\">\n                        {/* Language: EN / MN  */}\n                        <br/>\n                        Github: <b><a href=\"https://github.com/PunkOwl/\">github.com/PunkOwl</a></b>\n                        <br/>\n                    </div>\n                </div>\n            </footer>\n        </main>\n    );\n}\n\n","import Home from './component/home';\nimport Projects from './component/projects';\nimport About from './component/about';\n\nexport default [\n    {\n        title: 'Home',\n        path: '/',\n        exact: true,\n        component: Home\n    },\n    {\n        title: 'Projects',\n        path: '/projects',\n        exact: true,\n        component: Projects\n    },\n    {\n        title: 'About',\n        path: '/about',\n        exact: true,\n        component: About\n    }\n]","import React from 'react';\n\nexport default function Home() {\n    return (\n        <div className=\"home-container\">\n            <div className=\"center\">\n                <div className=\"punkowl\">PunkOwl</div>\n                <div className=\"punkowl-subtitle\">programming as poetry @ ulaanbaatar</div>\n                <ul className=\"home-menu\">\n                    <li>\n                        <div>[ _projects ]</div>\n                    </li>\n                    <li>\n                        <div>[ _about ]</div>\n                    </li>\n                    <li>\n                        <div>[ _developerNote ]</div>\n                    </li>\n                </ul>\n            </div>\n        </div>\n    );\n}","import React from 'react';\n\nexport default function Projects() {\n    return (\n        <div></div>\n    );\n}","import React from 'react';\n\nexport default function About() {\n    return (\n        <div></div>\n    );\n}","import React from 'react';\nimport { HashRouter, Switch, Route } from 'react-router-dom';\nimport Template from './component/template';\nimport routes from \"./routes\";\n\nfunction App() {\n  return (\n    <HashRouter>\n      <Switch>\n        <Route \n          render={rest => (\n            <Template>\n              <Switch>\n                {routes.map(route => (\n                  <Route key={route.key} {...route} />\n                ))}\n              </Switch>\n            </Template>\n          )}\n        />\n      </Switch>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}